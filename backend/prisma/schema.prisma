// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              Int       @id @default(autoincrement())
  displayName     String    @map("display_name") @db.VarChar(100)
  username        String    @unique @db.VarChar(100)
  email           String    @unique @db.VarChar(100)
  password        String    @db.VarChar(255) // เพิ่ม field password (เก็บ hash)
  posts           Post[]    @relation(name: "AuthorPosts")
  comments        Comment[]
  createdAt       DateTime  @default(now()) @map("created_at")
  createdBy       Int?      @map("created_by")
  createdByUser   User?     @relation(name: "CreatedByUser", fields: [createdBy], references: [id]) //join table users - created by
  CreatedPosts    Post[]    @relation(name: "CreatedByPosts") //join table posts - created by
  CreatedComments Comment[] @relation(name: "CreatedByComments") //join table comments - created by
  updatedAt       DateTime  @updatedAt @map("updated_at")
  updatedBy       Int?      @map("updated_by")
  updatedByUser   User?     @relation(name: "UpdatedByUser", fields: [updatedBy], references: [id]) //join table users - updated by
  UpdatedPosts    Post[]    @relation(name: "UpdatedByPosts") //join table posts - updated by
  UpdatedComments Comment[] @relation(name: "UpdatedByComments") //join table comments - updated by
  deletedAt       DateTime? @map("deleted_at")
  deletedBy       Int?      @map("deleted_by")
  isActive        Boolean   @default(true) @map("is_active")
  CreatedUser     User[]    @relation(name: "CreatedByUser")
  UpdatedUser     User[]    @relation(name: "UpdatedByUser")

  @@map("users")
}

model Post {
  id            Int       @id @default(autoincrement())
  title         String    @unique @db.VarChar(500)
  content       String    @db.Text
  author        User      @relation(name: "AuthorPosts", fields: [authorId], references: [id])
  authorId      Int       @map("author_id")
  comments      Comment[]
  createdAt     DateTime  @default(now()) @map("created_at")
  createdByUser User?     @relation(name: "CreatedByPosts", fields: [createdBy], references: [id])
  createdBy     Int?      @map("created_by")
  updatedAt     DateTime  @updatedAt @map("updated_at")
  updatedBy     Int?      @map("updated_by")
  updatedByUser User?     @relation(name: "UpdatedByPosts", fields: [updatedBy], references: [id])
  deletedAt     DateTime? @map("deleted_at")
  deletedBy     Int?      @map("deleted_by")
  isActive      Boolean   @default(true) @map("is_active")

  @@map("posts")
}

model Comment {
  id            Int       @id @default(autoincrement())
  content       String    @db.Text
  post          Post      @relation(fields: [postId], references: [id])
  postId        Int       @map("post_id")
  user          User      @relation(fields: [userId], references: [id])
  userId        Int       @map("user_id")
  createdAt     DateTime  @default(now()) @map("created_at")
  createdBy     Int?      @map("created_by")
  createdByUser User?     @relation(name: "CreatedByComments", fields: [createdBy], references: [id])
  updatedAt     DateTime  @updatedAt @map("updated_at")
  updatedBy     Int?      @map("updated_by")
  updatedByUser User?     @relation(name: "UpdatedByComments", fields: [updatedBy], references: [id])
  deletedAt     DateTime? @map("deleted_at")
  deletedBy     Int?      @map("deleted_by")
  isActive      Boolean   @default(true) @map("is_active")

  @@map("comments")
}

model SeedHistory {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  createdAt DateTime @default(now()) @map("created_at")

  @@map("seed_history")
}
